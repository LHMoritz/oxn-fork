# generated by datamodel-codegen:
#   filename:  experiment_schema.json
#   timestamp: 2025-01-18T11:32:51+00:00

from __future__ import annotations

from dataclasses import asdict
from typing import Any, Dict, List, Optional, Union, Literal

from pydantic import BaseModel, Field, constr

from backend.internal.store import FileFormat


class Jaeger(BaseModel):
    name: str
    namespace: str


class Prometheus(BaseModel):
    name: str
    namespace: str
    target: str


class Services(BaseModel):
    jaeger: Jaeger
    prometheus: List[Prometheus]


class Responses(BaseModel):
    name: str
    target: str
    metric_name: str
    type: Literal['metric']
    step: int
    left_window: str
    right_window: str


class Responses1(BaseModel):
    name: str
    type: Literal['trace']
    service_name: str
    left_window: str
    right_window: str
    limit: Optional[int] = None


class Treatments(BaseModel):
    action: str
    params: Dict[str, Any]


class RequiredItem(BaseModel):
    namespace: str
    name: str


class Sue(BaseModel):
    compose: str
    exclude: Optional[List[str]] = None
    include: Optional[List[str]] = None
    required: Optional[List[RequiredItem]] = None


class Target(BaseModel):
    name: str
    namespace: str
    port: int


class Loadgen(BaseModel):
    run_time: str
    max_users: Optional[int] = None
    spawn_rate: Optional[int] = None
    locust_files: Optional[List[str]] = None
    target: Optional[Target] = None

class Experiment(BaseModel):
    name: Optional[str] = None
    version: str
    orchestrator: str
    services: Optional[Services] = None
    responses: List[Union[Responses, Responses1]]
    treatments: Optional[List[Dict[str, Treatments]]] = None
    sue: Sue
    loadgen: Loadgen

class CreateExperimentResponse(BaseModel):
    id: str
    name: str
    status: str
    created_at: str
    started_at: str
    completed_at: str
    error_message: str
    spec: Experiment

class CreateBatchExperimentResponse(BaseModel):
    id: str
    name: str
    status: str
    created_at: str
    started_at: str
    completed_at: str
    error_message: str
    spec: Experiment
    parameter_variations: Dict[str, Any]

class ExperimentStatus(BaseModel):
    id: str
    name: str
    status: str
    started_at: str
    completed_at: str
    error_message: str


class CreateBatchExperimentRequest(BaseModel):
    name: str
    config: Experiment
    parameter_variations: Dict[str, List[Union[str, float]]] 


class RunExperimentRequest(BaseModel):
    runs: int = 1
    output_formats: List[FileFormat] = [FileFormat.JSON]
